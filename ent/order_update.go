// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/avored/go-ecommerce/ent/address"
	"github.com/avored/go-ecommerce/ent/customer"
	"github.com/avored/go-ecommerce/ent/order"
	"github.com/avored/go-ecommerce/ent/orderproduct"
	"github.com/avored/go-ecommerce/ent/predicate"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetPaymentMethod sets the "payment_method" field.
func (ou *OrderUpdate) SetPaymentMethod(s string) *OrderUpdate {
	ou.mutation.SetPaymentMethod(s)
	return ou
}

// SetShippingMethod sets the "shipping_method" field.
func (ou *OrderUpdate) SetShippingMethod(s string) *OrderUpdate {
	ou.mutation.SetShippingMethod(s)
	return ou
}

// SetShippingAddressID sets the "shipping_address_id" field.
func (ou *OrderUpdate) SetShippingAddressID(i int) *OrderUpdate {
	ou.mutation.SetShippingAddressID(i)
	return ou
}

// SetNillableShippingAddressID sets the "shipping_address_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingAddressID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetShippingAddressID(*i)
	}
	return ou
}

// ClearShippingAddressID clears the value of the "shipping_address_id" field.
func (ou *OrderUpdate) ClearShippingAddressID() *OrderUpdate {
	ou.mutation.ClearShippingAddressID()
	return ou
}

// SetBillingAddressID sets the "billing_address_id" field.
func (ou *OrderUpdate) SetBillingAddressID(i int) *OrderUpdate {
	ou.mutation.SetBillingAddressID(i)
	return ou
}

// SetNillableBillingAddressID sets the "billing_address_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableBillingAddressID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetBillingAddressID(*i)
	}
	return ou
}

// ClearBillingAddressID clears the value of the "billing_address_id" field.
func (ou *OrderUpdate) ClearBillingAddressID() *OrderUpdate {
	ou.mutation.ClearBillingAddressID()
	return ou
}

// SetCustomerID sets the "customer_id" field.
func (ou *OrderUpdate) SetCustomerID(i int) *OrderUpdate {
	ou.mutation.SetCustomerID(i)
	return ou
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetCustomerID(*i)
	}
	return ou
}

// ClearCustomerID clears the value of the "customer_id" field.
func (ou *OrderUpdate) ClearCustomerID() *OrderUpdate {
	ou.mutation.ClearCustomerID()
	return ou
}

// SetShippingAddress sets the "shipping_address" edge to the Address entity.
func (ou *OrderUpdate) SetShippingAddress(a *Address) *OrderUpdate {
	return ou.SetShippingAddressID(a.ID)
}

// SetBillingAddress sets the "billing_address" edge to the Address entity.
func (ou *OrderUpdate) SetBillingAddress(a *Address) *OrderUpdate {
	return ou.SetBillingAddressID(a.ID)
}

// SetCustomerOrderID sets the "customer_order" edge to the Customer entity by ID.
func (ou *OrderUpdate) SetCustomerOrderID(id int) *OrderUpdate {
	ou.mutation.SetCustomerOrderID(id)
	return ou
}

// SetNillableCustomerOrderID sets the "customer_order" edge to the Customer entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCustomerOrderID(id *int) *OrderUpdate {
	if id != nil {
		ou = ou.SetCustomerOrderID(*id)
	}
	return ou
}

// SetCustomerOrder sets the "customer_order" edge to the Customer entity.
func (ou *OrderUpdate) SetCustomerOrder(c *Customer) *OrderUpdate {
	return ou.SetCustomerOrderID(c.ID)
}

// AddOrderProductIDs adds the "order_products" edge to the OrderProduct entity by IDs.
func (ou *OrderUpdate) AddOrderProductIDs(ids ...int) *OrderUpdate {
	ou.mutation.AddOrderProductIDs(ids...)
	return ou
}

// AddOrderProducts adds the "order_products" edges to the OrderProduct entity.
func (ou *OrderUpdate) AddOrderProducts(o ...*OrderProduct) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOrderProductIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearShippingAddress clears the "shipping_address" edge to the Address entity.
func (ou *OrderUpdate) ClearShippingAddress() *OrderUpdate {
	ou.mutation.ClearShippingAddress()
	return ou
}

// ClearBillingAddress clears the "billing_address" edge to the Address entity.
func (ou *OrderUpdate) ClearBillingAddress() *OrderUpdate {
	ou.mutation.ClearBillingAddress()
	return ou
}

// ClearCustomerOrder clears the "customer_order" edge to the Customer entity.
func (ou *OrderUpdate) ClearCustomerOrder() *OrderUpdate {
	ou.mutation.ClearCustomerOrder()
	return ou
}

// ClearOrderProducts clears all "order_products" edges to the OrderProduct entity.
func (ou *OrderUpdate) ClearOrderProducts() *OrderUpdate {
	ou.mutation.ClearOrderProducts()
	return ou
}

// RemoveOrderProductIDs removes the "order_products" edge to OrderProduct entities by IDs.
func (ou *OrderUpdate) RemoveOrderProductIDs(ids ...int) *OrderUpdate {
	ou.mutation.RemoveOrderProductIDs(ids...)
	return ou
}

// RemoveOrderProducts removes "order_products" edges to OrderProduct entities.
func (ou *OrderUpdate) RemoveOrderProducts(o ...*OrderProduct) *OrderUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOrderProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ou.defaults()
	if len(ou.hooks) == 0 {
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.PaymentMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaymentMethod,
		})
	}
	if value, ok := ou.mutation.ShippingMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldShippingMethod,
		})
	}
	if ou.mutation.ShippingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippingAddressTable,
			Columns: []string{order.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippingAddressTable,
			Columns: []string{order.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CustomerOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerOrderTable,
			Columns: []string{order.CustomerOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CustomerOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerOrderTable,
			Columns: []string{order.CustomerOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrderProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderProductsTable,
			Columns: []string{order.OrderProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrderProductsIDs(); len(nodes) > 0 && !ou.mutation.OrderProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderProductsTable,
			Columns: []string{order.OrderProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrderProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderProductsTable,
			Columns: []string{order.OrderProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetPaymentMethod sets the "payment_method" field.
func (ouo *OrderUpdateOne) SetPaymentMethod(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentMethod(s)
	return ouo
}

// SetShippingMethod sets the "shipping_method" field.
func (ouo *OrderUpdateOne) SetShippingMethod(s string) *OrderUpdateOne {
	ouo.mutation.SetShippingMethod(s)
	return ouo
}

// SetShippingAddressID sets the "shipping_address_id" field.
func (ouo *OrderUpdateOne) SetShippingAddressID(i int) *OrderUpdateOne {
	ouo.mutation.SetShippingAddressID(i)
	return ouo
}

// SetNillableShippingAddressID sets the "shipping_address_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingAddressID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetShippingAddressID(*i)
	}
	return ouo
}

// ClearShippingAddressID clears the value of the "shipping_address_id" field.
func (ouo *OrderUpdateOne) ClearShippingAddressID() *OrderUpdateOne {
	ouo.mutation.ClearShippingAddressID()
	return ouo
}

// SetBillingAddressID sets the "billing_address_id" field.
func (ouo *OrderUpdateOne) SetBillingAddressID(i int) *OrderUpdateOne {
	ouo.mutation.SetBillingAddressID(i)
	return ouo
}

// SetNillableBillingAddressID sets the "billing_address_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableBillingAddressID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetBillingAddressID(*i)
	}
	return ouo
}

// ClearBillingAddressID clears the value of the "billing_address_id" field.
func (ouo *OrderUpdateOne) ClearBillingAddressID() *OrderUpdateOne {
	ouo.mutation.ClearBillingAddressID()
	return ouo
}

// SetCustomerID sets the "customer_id" field.
func (ouo *OrderUpdateOne) SetCustomerID(i int) *OrderUpdateOne {
	ouo.mutation.SetCustomerID(i)
	return ouo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetCustomerID(*i)
	}
	return ouo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (ouo *OrderUpdateOne) ClearCustomerID() *OrderUpdateOne {
	ouo.mutation.ClearCustomerID()
	return ouo
}

// SetShippingAddress sets the "shipping_address" edge to the Address entity.
func (ouo *OrderUpdateOne) SetShippingAddress(a *Address) *OrderUpdateOne {
	return ouo.SetShippingAddressID(a.ID)
}

// SetBillingAddress sets the "billing_address" edge to the Address entity.
func (ouo *OrderUpdateOne) SetBillingAddress(a *Address) *OrderUpdateOne {
	return ouo.SetBillingAddressID(a.ID)
}

// SetCustomerOrderID sets the "customer_order" edge to the Customer entity by ID.
func (ouo *OrderUpdateOne) SetCustomerOrderID(id int) *OrderUpdateOne {
	ouo.mutation.SetCustomerOrderID(id)
	return ouo
}

// SetNillableCustomerOrderID sets the "customer_order" edge to the Customer entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCustomerOrderID(id *int) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCustomerOrderID(*id)
	}
	return ouo
}

// SetCustomerOrder sets the "customer_order" edge to the Customer entity.
func (ouo *OrderUpdateOne) SetCustomerOrder(c *Customer) *OrderUpdateOne {
	return ouo.SetCustomerOrderID(c.ID)
}

// AddOrderProductIDs adds the "order_products" edge to the OrderProduct entity by IDs.
func (ouo *OrderUpdateOne) AddOrderProductIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.AddOrderProductIDs(ids...)
	return ouo
}

// AddOrderProducts adds the "order_products" edges to the OrderProduct entity.
func (ouo *OrderUpdateOne) AddOrderProducts(o ...*OrderProduct) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOrderProductIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearShippingAddress clears the "shipping_address" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearShippingAddress() *OrderUpdateOne {
	ouo.mutation.ClearShippingAddress()
	return ouo
}

// ClearBillingAddress clears the "billing_address" edge to the Address entity.
func (ouo *OrderUpdateOne) ClearBillingAddress() *OrderUpdateOne {
	ouo.mutation.ClearBillingAddress()
	return ouo
}

// ClearCustomerOrder clears the "customer_order" edge to the Customer entity.
func (ouo *OrderUpdateOne) ClearCustomerOrder() *OrderUpdateOne {
	ouo.mutation.ClearCustomerOrder()
	return ouo
}

// ClearOrderProducts clears all "order_products" edges to the OrderProduct entity.
func (ouo *OrderUpdateOne) ClearOrderProducts() *OrderUpdateOne {
	ouo.mutation.ClearOrderProducts()
	return ouo
}

// RemoveOrderProductIDs removes the "order_products" edge to OrderProduct entities by IDs.
func (ouo *OrderUpdateOne) RemoveOrderProductIDs(ids ...int) *OrderUpdateOne {
	ouo.mutation.RemoveOrderProductIDs(ids...)
	return ouo
}

// RemoveOrderProducts removes "order_products" edges to OrderProduct entities.
func (ouo *OrderUpdateOne) RemoveOrderProducts(o ...*OrderProduct) *OrderUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOrderProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	ouo.defaults()
	if len(ouo.hooks) == 0 {
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.PaymentMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldPaymentMethod,
		})
	}
	if value, ok := ouo.mutation.ShippingMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldShippingMethod,
		})
	}
	if ouo.mutation.ShippingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippingAddressTable,
			Columns: []string{order.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ShippingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ShippingAddressTable,
			Columns: []string{order.ShippingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.BillingAddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.BillingAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.BillingAddressTable,
			Columns: []string{order.BillingAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CustomerOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerOrderTable,
			Columns: []string{order.CustomerOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CustomerOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CustomerOrderTable,
			Columns: []string{order.CustomerOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrderProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderProductsTable,
			Columns: []string{order.OrderProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrderProductsIDs(); len(nodes) > 0 && !ouo.mutation.OrderProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderProductsTable,
			Columns: []string{order.OrderProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrderProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.OrderProductsTable,
			Columns: []string{order.OrderProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: orderproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
