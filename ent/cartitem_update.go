// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/avored/go-ecommerce/ent/cart"
	"github.com/avored/go-ecommerce/ent/cartitem"
	"github.com/avored/go-ecommerce/ent/predicate"
	"github.com/avored/go-ecommerce/ent/product"
)

// CartItemUpdate is the builder for updating CartItem entities.
type CartItemUpdate struct {
	config
	hooks    []Hook
	mutation *CartItemMutation
}

// Where appends a list predicates to the CartItemUpdate builder.
func (ciu *CartItemUpdate) Where(ps ...predicate.CartItem) *CartItemUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetName sets the "name" field.
func (ciu *CartItemUpdate) SetName(s string) *CartItemUpdate {
	ciu.mutation.SetName(s)
	return ciu
}

// SetQty sets the "qty" field.
func (ciu *CartItemUpdate) SetQty(f float64) *CartItemUpdate {
	ciu.mutation.ResetQty()
	ciu.mutation.SetQty(f)
	return ciu
}

// AddQty adds f to the "qty" field.
func (ciu *CartItemUpdate) AddQty(f float64) *CartItemUpdate {
	ciu.mutation.AddQty(f)
	return ciu
}

// SetCartID sets the "cart_id" field.
func (ciu *CartItemUpdate) SetCartID(i int) *CartItemUpdate {
	ciu.mutation.SetCartID(i)
	return ciu
}

// SetNillableCartID sets the "cart_id" field if the given value is not nil.
func (ciu *CartItemUpdate) SetNillableCartID(i *int) *CartItemUpdate {
	if i != nil {
		ciu.SetCartID(*i)
	}
	return ciu
}

// ClearCartID clears the value of the "cart_id" field.
func (ciu *CartItemUpdate) ClearCartID() *CartItemUpdate {
	ciu.mutation.ClearCartID()
	return ciu
}

// SetProductID sets the "product_id" field.
func (ciu *CartItemUpdate) SetProductID(i int) *CartItemUpdate {
	ciu.mutation.SetProductID(i)
	return ciu
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ciu *CartItemUpdate) SetNillableProductID(i *int) *CartItemUpdate {
	if i != nil {
		ciu.SetProductID(*i)
	}
	return ciu
}

// ClearProductID clears the value of the "product_id" field.
func (ciu *CartItemUpdate) ClearProductID() *CartItemUpdate {
	ciu.mutation.ClearProductID()
	return ciu
}

// SetItemPrice sets the "item_price" field.
func (ciu *CartItemUpdate) SetItemPrice(f float64) *CartItemUpdate {
	ciu.mutation.ResetItemPrice()
	ciu.mutation.SetItemPrice(f)
	return ciu
}

// AddItemPrice adds f to the "item_price" field.
func (ciu *CartItemUpdate) AddItemPrice(f float64) *CartItemUpdate {
	ciu.mutation.AddItemPrice(f)
	return ciu
}

// SetCart sets the "cart" edge to the Cart entity.
func (ciu *CartItemUpdate) SetCart(c *Cart) *CartItemUpdate {
	return ciu.SetCartID(c.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (ciu *CartItemUpdate) SetProduct(p *Product) *CartItemUpdate {
	return ciu.SetProductID(p.ID)
}

// Mutation returns the CartItemMutation object of the builder.
func (ciu *CartItemUpdate) Mutation() *CartItemMutation {
	return ciu.mutation
}

// ClearCart clears the "cart" edge to the Cart entity.
func (ciu *CartItemUpdate) ClearCart() *CartItemUpdate {
	ciu.mutation.ClearCart()
	return ciu
}

// ClearProduct clears the "product" edge to the Product entity.
func (ciu *CartItemUpdate) ClearProduct() *CartItemUpdate {
	ciu.mutation.ClearProduct()
	return ciu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *CartItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			if ciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CartItemUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CartItemUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CartItemUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *CartItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartitem.Table,
			Columns: cartitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartitem.FieldID,
			},
		},
	}
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartitem.FieldName,
		})
	}
	if value, ok := ciu.mutation.Qty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldQty,
		})
	}
	if value, ok := ciu.mutation.AddedQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldQty,
		})
	}
	if value, ok := ciu.mutation.ItemPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldItemPrice,
		})
	}
	if value, ok := ciu.mutation.AddedItemPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldItemPrice,
		})
	}
	if ciu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.ProductTable,
			Columns: []string{cartitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.ProductTable,
			Columns: []string{cartitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CartItemUpdateOne is the builder for updating a single CartItem entity.
type CartItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartItemMutation
}

// SetName sets the "name" field.
func (ciuo *CartItemUpdateOne) SetName(s string) *CartItemUpdateOne {
	ciuo.mutation.SetName(s)
	return ciuo
}

// SetQty sets the "qty" field.
func (ciuo *CartItemUpdateOne) SetQty(f float64) *CartItemUpdateOne {
	ciuo.mutation.ResetQty()
	ciuo.mutation.SetQty(f)
	return ciuo
}

// AddQty adds f to the "qty" field.
func (ciuo *CartItemUpdateOne) AddQty(f float64) *CartItemUpdateOne {
	ciuo.mutation.AddQty(f)
	return ciuo
}

// SetCartID sets the "cart_id" field.
func (ciuo *CartItemUpdateOne) SetCartID(i int) *CartItemUpdateOne {
	ciuo.mutation.SetCartID(i)
	return ciuo
}

// SetNillableCartID sets the "cart_id" field if the given value is not nil.
func (ciuo *CartItemUpdateOne) SetNillableCartID(i *int) *CartItemUpdateOne {
	if i != nil {
		ciuo.SetCartID(*i)
	}
	return ciuo
}

// ClearCartID clears the value of the "cart_id" field.
func (ciuo *CartItemUpdateOne) ClearCartID() *CartItemUpdateOne {
	ciuo.mutation.ClearCartID()
	return ciuo
}

// SetProductID sets the "product_id" field.
func (ciuo *CartItemUpdateOne) SetProductID(i int) *CartItemUpdateOne {
	ciuo.mutation.SetProductID(i)
	return ciuo
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (ciuo *CartItemUpdateOne) SetNillableProductID(i *int) *CartItemUpdateOne {
	if i != nil {
		ciuo.SetProductID(*i)
	}
	return ciuo
}

// ClearProductID clears the value of the "product_id" field.
func (ciuo *CartItemUpdateOne) ClearProductID() *CartItemUpdateOne {
	ciuo.mutation.ClearProductID()
	return ciuo
}

// SetItemPrice sets the "item_price" field.
func (ciuo *CartItemUpdateOne) SetItemPrice(f float64) *CartItemUpdateOne {
	ciuo.mutation.ResetItemPrice()
	ciuo.mutation.SetItemPrice(f)
	return ciuo
}

// AddItemPrice adds f to the "item_price" field.
func (ciuo *CartItemUpdateOne) AddItemPrice(f float64) *CartItemUpdateOne {
	ciuo.mutation.AddItemPrice(f)
	return ciuo
}

// SetCart sets the "cart" edge to the Cart entity.
func (ciuo *CartItemUpdateOne) SetCart(c *Cart) *CartItemUpdateOne {
	return ciuo.SetCartID(c.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (ciuo *CartItemUpdateOne) SetProduct(p *Product) *CartItemUpdateOne {
	return ciuo.SetProductID(p.ID)
}

// Mutation returns the CartItemMutation object of the builder.
func (ciuo *CartItemUpdateOne) Mutation() *CartItemMutation {
	return ciuo.mutation
}

// ClearCart clears the "cart" edge to the Cart entity.
func (ciuo *CartItemUpdateOne) ClearCart() *CartItemUpdateOne {
	ciuo.mutation.ClearCart()
	return ciuo
}

// ClearProduct clears the "product" edge to the Product entity.
func (ciuo *CartItemUpdateOne) ClearProduct() *CartItemUpdateOne {
	ciuo.mutation.ClearProduct()
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *CartItemUpdateOne) Select(field string, fields ...string) *CartItemUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated CartItem entity.
func (ciuo *CartItemUpdateOne) Save(ctx context.Context) (*CartItem, error) {
	var (
		err  error
		node *CartItem
	)
	if len(ciuo.hooks) == 0 {
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			if ciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CartItemUpdateOne) SaveX(ctx context.Context) *CartItem {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *CartItemUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CartItemUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *CartItemUpdateOne) sqlSave(ctx context.Context) (_node *CartItem, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartitem.Table,
			Columns: cartitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartitem.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CartItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartitem.FieldID)
		for _, f := range fields {
			if !cartitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartitem.FieldName,
		})
	}
	if value, ok := ciuo.mutation.Qty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldQty,
		})
	}
	if value, ok := ciuo.mutation.AddedQty(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldQty,
		})
	}
	if value, ok := ciuo.mutation.ItemPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldItemPrice,
		})
	}
	if value, ok := ciuo.mutation.AddedItemPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldItemPrice,
		})
	}
	if ciuo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.ProductTable,
			Columns: []string{cartitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.ProductTable,
			Columns: []string{cartitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CartItem{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
