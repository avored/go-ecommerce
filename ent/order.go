// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/avored/go-ecommerce/ent/address"
	"github.com/avored/go-ecommerce/ent/customer"
	"github.com/avored/go-ecommerce/ent/order"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// PaymentMethod holds the value of the "payment_method" field.
	PaymentMethod string `json:"payment_method,omitempty"`
	// ShippingMethod holds the value of the "shipping_method" field.
	ShippingMethod string `json:"shipping_method,omitempty"`
	// ShippingAddressID holds the value of the "shipping_address_id" field.
	ShippingAddressID int `json:"shipping_address_id,omitempty"`
	// BillingAddressID holds the value of the "billing_address_id" field.
	BillingAddressID int `json:"billing_address_id,omitempty"`
	// CustomerID holds the value of the "customer_id" field.
	CustomerID int `json:"customer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges OrderEdges `json:"edges"`
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// ShippingAddress holds the value of the shipping_address edge.
	ShippingAddress *Address `json:"shipping_address,omitempty"`
	// BillingAddress holds the value of the billing_address edge.
	BillingAddress *Address `json:"billing_address,omitempty"`
	// CustomerOrder holds the value of the customer_order edge.
	CustomerOrder *Customer `json:"customer_order,omitempty"`
	// OrderProducts holds the value of the order_products edge.
	OrderProducts []*OrderProduct `json:"order_products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ShippingAddressOrErr returns the ShippingAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) ShippingAddressOrErr() (*Address, error) {
	if e.loadedTypes[0] {
		if e.ShippingAddress == nil {
			// The edge shipping_address was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: address.Label}
		}
		return e.ShippingAddress, nil
	}
	return nil, &NotLoadedError{edge: "shipping_address"}
}

// BillingAddressOrErr returns the BillingAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) BillingAddressOrErr() (*Address, error) {
	if e.loadedTypes[1] {
		if e.BillingAddress == nil {
			// The edge billing_address was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: address.Label}
		}
		return e.BillingAddress, nil
	}
	return nil, &NotLoadedError{edge: "billing_address"}
}

// CustomerOrderOrErr returns the CustomerOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CustomerOrderOrErr() (*Customer, error) {
	if e.loadedTypes[2] {
		if e.CustomerOrder == nil {
			// The edge customer_order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.CustomerOrder, nil
	}
	return nil, &NotLoadedError{edge: "customer_order"}
}

// OrderProductsOrErr returns the OrderProducts value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) OrderProductsOrErr() ([]*OrderProduct, error) {
	if e.loadedTypes[3] {
		return e.OrderProducts, nil
	}
	return nil, &NotLoadedError{edge: "order_products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldID, order.FieldShippingAddressID, order.FieldBillingAddressID, order.FieldCustomerID:
			values[i] = new(sql.NullInt64)
		case order.FieldPaymentMethod, order.FieldShippingMethod:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldPaymentMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_method", values[i])
			} else if value.Valid {
				o.PaymentMethod = value.String
			}
		case order.FieldShippingMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_method", values[i])
			} else if value.Valid {
				o.ShippingMethod = value.String
			}
		case order.FieldShippingAddressID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shipping_address_id", values[i])
			} else if value.Valid {
				o.ShippingAddressID = int(value.Int64)
			}
		case order.FieldBillingAddressID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address_id", values[i])
			} else if value.Valid {
				o.BillingAddressID = int(value.Int64)
			}
		case order.FieldCustomerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field customer_id", values[i])
			} else if value.Valid {
				o.CustomerID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShippingAddress queries the "shipping_address" edge of the Order entity.
func (o *Order) QueryShippingAddress() *AddressQuery {
	return (&OrderClient{config: o.config}).QueryShippingAddress(o)
}

// QueryBillingAddress queries the "billing_address" edge of the Order entity.
func (o *Order) QueryBillingAddress() *AddressQuery {
	return (&OrderClient{config: o.config}).QueryBillingAddress(o)
}

// QueryCustomerOrder queries the "customer_order" edge of the Order entity.
func (o *Order) QueryCustomerOrder() *CustomerQuery {
	return (&OrderClient{config: o.config}).QueryCustomerOrder(o)
}

// QueryOrderProducts queries the "order_products" edge of the Order entity.
func (o *Order) QueryOrderProducts() *OrderProductQuery {
	return (&OrderClient{config: o.config}).QueryOrderProducts(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", payment_method=")
	builder.WriteString(o.PaymentMethod)
	builder.WriteString(", shipping_method=")
	builder.WriteString(o.ShippingMethod)
	builder.WriteString(", shipping_address_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ShippingAddressID))
	builder.WriteString(", billing_address_id=")
	builder.WriteString(fmt.Sprintf("%v", o.BillingAddressID))
	builder.WriteString(", customer_id=")
	builder.WriteString(fmt.Sprintf("%v", o.CustomerID))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
