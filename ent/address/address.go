// Code generated by entc, DO NOT EDIT.

package address

import (
	"time"
)

const (
	// Label holds the string label denoting the address type in the database.
	Label = "address"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldAddress1 holds the string denoting the address1 field in the database.
	FieldAddress1 = "address1"
	// FieldAddress2 holds the string denoting the address2 field in the database.
	FieldAddress2 = "address2"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldSuburb holds the string denoting the suburb field in the database.
	FieldSuburb = "suburb"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldPostcode holds the string denoting the postcode field in the database.
	FieldPostcode = "postcode"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldCountryID holds the string denoting the country_id field in the database.
	FieldCountryID = "country_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// EdgeCustomer holds the string denoting the customer edge name in mutations.
	EdgeCustomer = "customer"
	// EdgeShippingOrders holds the string denoting the shipping_orders edge name in mutations.
	EdgeShippingOrders = "shipping_orders"
	// EdgeBillingOrders holds the string denoting the billing_orders edge name in mutations.
	EdgeBillingOrders = "billing_orders"
	// Table holds the table name of the address in the database.
	Table = "addresses"
	// CustomerTable is the table that holds the customer relation/edge.
	CustomerTable = "addresses"
	// CustomerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerInverseTable = "customers"
	// CustomerColumn is the table column denoting the customer relation/edge.
	CustomerColumn = "customer_id"
	// ShippingOrdersTable is the table that holds the shipping_orders relation/edge.
	ShippingOrdersTable = "orders"
	// ShippingOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	ShippingOrdersInverseTable = "orders"
	// ShippingOrdersColumn is the table column denoting the shipping_orders relation/edge.
	ShippingOrdersColumn = "shipping_address_id"
	// BillingOrdersTable is the table that holds the billing_orders relation/edge.
	BillingOrdersTable = "orders"
	// BillingOrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	BillingOrdersInverseTable = "orders"
	// BillingOrdersColumn is the table column denoting the billing_orders relation/edge.
	BillingOrdersColumn = "billing_address_id"
)

// Columns holds all SQL columns for address fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
	FieldIsDefault,
	FieldFirstName,
	FieldLastName,
	FieldAddress1,
	FieldAddress2,
	FieldCompanyName,
	FieldSuburb,
	FieldCity,
	FieldState,
	FieldPostcode,
	FieldPhone,
	FieldCountryID,
	FieldCustomerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
)
