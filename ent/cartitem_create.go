// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/avored/go-ecommerce/ent/cart"
	"github.com/avored/go-ecommerce/ent/cartitem"
	"github.com/avored/go-ecommerce/ent/product"
)

// CartItemCreate is the builder for creating a CartItem entity.
type CartItemCreate struct {
	config
	mutation *CartItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cic *CartItemCreate) SetName(s string) *CartItemCreate {
	cic.mutation.SetName(s)
	return cic
}

// SetQty sets the "qty" field.
func (cic *CartItemCreate) SetQty(f float64) *CartItemCreate {
	cic.mutation.SetQty(f)
	return cic
}

// SetCartID sets the "cart_id" field.
func (cic *CartItemCreate) SetCartID(i int) *CartItemCreate {
	cic.mutation.SetCartID(i)
	return cic
}

// SetNillableCartID sets the "cart_id" field if the given value is not nil.
func (cic *CartItemCreate) SetNillableCartID(i *int) *CartItemCreate {
	if i != nil {
		cic.SetCartID(*i)
	}
	return cic
}

// SetProductID sets the "product_id" field.
func (cic *CartItemCreate) SetProductID(i int) *CartItemCreate {
	cic.mutation.SetProductID(i)
	return cic
}

// SetNillableProductID sets the "product_id" field if the given value is not nil.
func (cic *CartItemCreate) SetNillableProductID(i *int) *CartItemCreate {
	if i != nil {
		cic.SetProductID(*i)
	}
	return cic
}

// SetItemPrice sets the "item_price" field.
func (cic *CartItemCreate) SetItemPrice(f float64) *CartItemCreate {
	cic.mutation.SetItemPrice(f)
	return cic
}

// SetCart sets the "cart" edge to the Cart entity.
func (cic *CartItemCreate) SetCart(c *Cart) *CartItemCreate {
	return cic.SetCartID(c.ID)
}

// SetProduct sets the "product" edge to the Product entity.
func (cic *CartItemCreate) SetProduct(p *Product) *CartItemCreate {
	return cic.SetProductID(p.ID)
}

// Mutation returns the CartItemMutation object of the builder.
func (cic *CartItemCreate) Mutation() *CartItemMutation {
	return cic.mutation
}

// Save creates the CartItem in the database.
func (cic *CartItemCreate) Save(ctx context.Context) (*CartItem, error) {
	var (
		err  error
		node *CartItem
	)
	if len(cic.hooks) == 0 {
		if err = cic.check(); err != nil {
			return nil, err
		}
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cic.check(); err != nil {
				return nil, err
			}
			cic.mutation = mutation
			if node, err = cic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			if cic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CartItemCreate) SaveX(ctx context.Context) *CartItem {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cic *CartItemCreate) Exec(ctx context.Context) error {
	_, err := cic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cic *CartItemCreate) ExecX(ctx context.Context) {
	if err := cic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cic *CartItemCreate) check() error {
	if _, ok := cic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CartItem.name"`)}
	}
	if _, ok := cic.mutation.Qty(); !ok {
		return &ValidationError{Name: "qty", err: errors.New(`ent: missing required field "CartItem.qty"`)}
	}
	if _, ok := cic.mutation.ItemPrice(); !ok {
		return &ValidationError{Name: "item_price", err: errors.New(`ent: missing required field "CartItem.item_price"`)}
	}
	return nil
}

func (cic *CartItemCreate) sqlSave(ctx context.Context) (*CartItem, error) {
	_node, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cic *CartItemCreate) createSpec() (*CartItem, *sqlgraph.CreateSpec) {
	var (
		_node = &CartItem{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cartitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartitem.FieldID,
			},
		}
	)
	if value, ok := cic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cartitem.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cic.mutation.Qty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldQty,
		})
		_node.Qty = value
	}
	if value, ok := cic.mutation.ItemPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: cartitem.FieldItemPrice,
		})
		_node.ItemPrice = value
	}
	if nodes := cic.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.CartTable,
			Columns: []string{cartitem.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CartID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cic.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartitem.ProductTable,
			Columns: []string{cartitem.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CartItemCreateBulk is the builder for creating many CartItem entities in bulk.
type CartItemCreateBulk struct {
	config
	builders []*CartItemCreate
}

// Save creates the CartItem entities in the database.
func (cicb *CartItemCreateBulk) Save(ctx context.Context) ([]*CartItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cicb.builders))
	nodes := make([]*CartItem, len(cicb.builders))
	mutators := make([]Mutator, len(cicb.builders))
	for i := range cicb.builders {
		func(i int, root context.Context) {
			builder := cicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CartItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cicb *CartItemCreateBulk) SaveX(ctx context.Context) []*CartItem {
	v, err := cicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cicb *CartItemCreateBulk) Exec(ctx context.Context) error {
	_, err := cicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cicb *CartItemCreateBulk) ExecX(ctx context.Context) {
	if err := cicb.Exec(ctx); err != nil {
		panic(err)
	}
}
