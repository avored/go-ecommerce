// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/avored/go-ecommerce/ent/address"
	"github.com/avored/go-ecommerce/ent/customer"
	"github.com/avored/go-ecommerce/ent/order"
	"github.com/avored/go-ecommerce/ent/predicate"
)

// AddressUpdate is the builder for updating Address entities.
type AddressUpdate struct {
	config
	hooks    []Hook
	mutation *AddressMutation
}

// Where appends a list predicates to the AddressUpdate builder.
func (au *AddressUpdate) Where(ps ...predicate.Address) *AddressUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AddressUpdate) SetUpdatedAt(t time.Time) *AddressUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetType sets the "type" field.
func (au *AddressUpdate) SetType(s string) *AddressUpdate {
	au.mutation.SetType(s)
	return au
}

// SetIsDefault sets the "is_default" field.
func (au *AddressUpdate) SetIsDefault(b bool) *AddressUpdate {
	au.mutation.SetIsDefault(b)
	return au
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (au *AddressUpdate) SetNillableIsDefault(b *bool) *AddressUpdate {
	if b != nil {
		au.SetIsDefault(*b)
	}
	return au
}

// SetFirstName sets the "first_name" field.
func (au *AddressUpdate) SetFirstName(s string) *AddressUpdate {
	au.mutation.SetFirstName(s)
	return au
}

// SetLastName sets the "last_name" field.
func (au *AddressUpdate) SetLastName(s string) *AddressUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetAddress1 sets the "address1" field.
func (au *AddressUpdate) SetAddress1(s string) *AddressUpdate {
	au.mutation.SetAddress1(s)
	return au
}

// SetAddress2 sets the "address2" field.
func (au *AddressUpdate) SetAddress2(s string) *AddressUpdate {
	au.mutation.SetAddress2(s)
	return au
}

// SetCompanyName sets the "company_name" field.
func (au *AddressUpdate) SetCompanyName(s string) *AddressUpdate {
	au.mutation.SetCompanyName(s)
	return au
}

// SetSuburb sets the "suburb" field.
func (au *AddressUpdate) SetSuburb(s string) *AddressUpdate {
	au.mutation.SetSuburb(s)
	return au
}

// SetCity sets the "city" field.
func (au *AddressUpdate) SetCity(s string) *AddressUpdate {
	au.mutation.SetCity(s)
	return au
}

// SetState sets the "state" field.
func (au *AddressUpdate) SetState(s string) *AddressUpdate {
	au.mutation.SetState(s)
	return au
}

// SetPostcode sets the "postcode" field.
func (au *AddressUpdate) SetPostcode(s string) *AddressUpdate {
	au.mutation.SetPostcode(s)
	return au
}

// SetPhone sets the "phone" field.
func (au *AddressUpdate) SetPhone(s string) *AddressUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetCountryID sets the "country_id" field.
func (au *AddressUpdate) SetCountryID(i int) *AddressUpdate {
	au.mutation.ResetCountryID()
	au.mutation.SetCountryID(i)
	return au
}

// AddCountryID adds i to the "country_id" field.
func (au *AddressUpdate) AddCountryID(i int) *AddressUpdate {
	au.mutation.AddCountryID(i)
	return au
}

// SetCustomerID sets the "customer_id" field.
func (au *AddressUpdate) SetCustomerID(i int) *AddressUpdate {
	au.mutation.SetCustomerID(i)
	return au
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (au *AddressUpdate) SetNillableCustomerID(i *int) *AddressUpdate {
	if i != nil {
		au.SetCustomerID(*i)
	}
	return au
}

// ClearCustomerID clears the value of the "customer_id" field.
func (au *AddressUpdate) ClearCustomerID() *AddressUpdate {
	au.mutation.ClearCustomerID()
	return au
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (au *AddressUpdate) SetCustomer(c *Customer) *AddressUpdate {
	return au.SetCustomerID(c.ID)
}

// AddShippingOrderIDs adds the "shipping_orders" edge to the Order entity by IDs.
func (au *AddressUpdate) AddShippingOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.AddShippingOrderIDs(ids...)
	return au
}

// AddShippingOrders adds the "shipping_orders" edges to the Order entity.
func (au *AddressUpdate) AddShippingOrders(o ...*Order) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddShippingOrderIDs(ids...)
}

// AddBillingOrderIDs adds the "billing_orders" edge to the Order entity by IDs.
func (au *AddressUpdate) AddBillingOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.AddBillingOrderIDs(ids...)
	return au
}

// AddBillingOrders adds the "billing_orders" edges to the Order entity.
func (au *AddressUpdate) AddBillingOrders(o ...*Order) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.AddBillingOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (au *AddressUpdate) Mutation() *AddressMutation {
	return au.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (au *AddressUpdate) ClearCustomer() *AddressUpdate {
	au.mutation.ClearCustomer()
	return au
}

// ClearShippingOrders clears all "shipping_orders" edges to the Order entity.
func (au *AddressUpdate) ClearShippingOrders() *AddressUpdate {
	au.mutation.ClearShippingOrders()
	return au
}

// RemoveShippingOrderIDs removes the "shipping_orders" edge to Order entities by IDs.
func (au *AddressUpdate) RemoveShippingOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveShippingOrderIDs(ids...)
	return au
}

// RemoveShippingOrders removes "shipping_orders" edges to Order entities.
func (au *AddressUpdate) RemoveShippingOrders(o ...*Order) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveShippingOrderIDs(ids...)
}

// ClearBillingOrders clears all "billing_orders" edges to the Order entity.
func (au *AddressUpdate) ClearBillingOrders() *AddressUpdate {
	au.mutation.ClearBillingOrders()
	return au
}

// RemoveBillingOrderIDs removes the "billing_orders" edge to Order entities by IDs.
func (au *AddressUpdate) RemoveBillingOrderIDs(ids ...int) *AddressUpdate {
	au.mutation.RemoveBillingOrderIDs(ids...)
	return au
}

// RemoveBillingOrders removes "billing_orders" edges to Order entities.
func (au *AddressUpdate) RemoveBillingOrders(o ...*Order) *AddressUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return au.RemoveBillingOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	au.defaults()
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AddressUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AddressUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AddressUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AddressUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldType,
		})
	}
	if value, ok := au.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: address.FieldIsDefault,
		})
	}
	if value, ok := au.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldFirstName,
		})
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldLastName,
		})
	}
	if value, ok := au.mutation.Address1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddress1,
		})
	}
	if value, ok := au.mutation.Address2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddress2,
		})
	}
	if value, ok := au.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCompanyName,
		})
	}
	if value, ok := au.mutation.Suburb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldSuburb,
		})
	}
	if value, ok := au.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCity,
		})
	}
	if value, ok := au.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldState,
		})
	}
	if value, ok := au.mutation.Postcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPostcode,
		})
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPhone,
		})
	}
	if value, ok := au.mutation.CountryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: address.FieldCountryID,
		})
	}
	if value, ok := au.mutation.AddedCountryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: address.FieldCountryID,
		})
	}
	if au.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ShippingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.ShippingOrdersTable,
			Columns: []string{address.ShippingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedShippingOrdersIDs(); len(nodes) > 0 && !au.mutation.ShippingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.ShippingOrdersTable,
			Columns: []string{address.ShippingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ShippingOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.ShippingOrdersTable,
			Columns: []string{address.ShippingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.BillingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.BillingOrdersTable,
			Columns: []string{address.BillingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedBillingOrdersIDs(); len(nodes) > 0 && !au.mutation.BillingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.BillingOrdersTable,
			Columns: []string{address.BillingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BillingOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.BillingOrdersTable,
			Columns: []string{address.BillingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AddressUpdateOne is the builder for updating a single Address entity.
type AddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AddressUpdateOne) SetUpdatedAt(t time.Time) *AddressUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetType sets the "type" field.
func (auo *AddressUpdateOne) SetType(s string) *AddressUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetIsDefault sets the "is_default" field.
func (auo *AddressUpdateOne) SetIsDefault(b bool) *AddressUpdateOne {
	auo.mutation.SetIsDefault(b)
	return auo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableIsDefault(b *bool) *AddressUpdateOne {
	if b != nil {
		auo.SetIsDefault(*b)
	}
	return auo
}

// SetFirstName sets the "first_name" field.
func (auo *AddressUpdateOne) SetFirstName(s string) *AddressUpdateOne {
	auo.mutation.SetFirstName(s)
	return auo
}

// SetLastName sets the "last_name" field.
func (auo *AddressUpdateOne) SetLastName(s string) *AddressUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetAddress1 sets the "address1" field.
func (auo *AddressUpdateOne) SetAddress1(s string) *AddressUpdateOne {
	auo.mutation.SetAddress1(s)
	return auo
}

// SetAddress2 sets the "address2" field.
func (auo *AddressUpdateOne) SetAddress2(s string) *AddressUpdateOne {
	auo.mutation.SetAddress2(s)
	return auo
}

// SetCompanyName sets the "company_name" field.
func (auo *AddressUpdateOne) SetCompanyName(s string) *AddressUpdateOne {
	auo.mutation.SetCompanyName(s)
	return auo
}

// SetSuburb sets the "suburb" field.
func (auo *AddressUpdateOne) SetSuburb(s string) *AddressUpdateOne {
	auo.mutation.SetSuburb(s)
	return auo
}

// SetCity sets the "city" field.
func (auo *AddressUpdateOne) SetCity(s string) *AddressUpdateOne {
	auo.mutation.SetCity(s)
	return auo
}

// SetState sets the "state" field.
func (auo *AddressUpdateOne) SetState(s string) *AddressUpdateOne {
	auo.mutation.SetState(s)
	return auo
}

// SetPostcode sets the "postcode" field.
func (auo *AddressUpdateOne) SetPostcode(s string) *AddressUpdateOne {
	auo.mutation.SetPostcode(s)
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AddressUpdateOne) SetPhone(s string) *AddressUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetCountryID sets the "country_id" field.
func (auo *AddressUpdateOne) SetCountryID(i int) *AddressUpdateOne {
	auo.mutation.ResetCountryID()
	auo.mutation.SetCountryID(i)
	return auo
}

// AddCountryID adds i to the "country_id" field.
func (auo *AddressUpdateOne) AddCountryID(i int) *AddressUpdateOne {
	auo.mutation.AddCountryID(i)
	return auo
}

// SetCustomerID sets the "customer_id" field.
func (auo *AddressUpdateOne) SetCustomerID(i int) *AddressUpdateOne {
	auo.mutation.SetCustomerID(i)
	return auo
}

// SetNillableCustomerID sets the "customer_id" field if the given value is not nil.
func (auo *AddressUpdateOne) SetNillableCustomerID(i *int) *AddressUpdateOne {
	if i != nil {
		auo.SetCustomerID(*i)
	}
	return auo
}

// ClearCustomerID clears the value of the "customer_id" field.
func (auo *AddressUpdateOne) ClearCustomerID() *AddressUpdateOne {
	auo.mutation.ClearCustomerID()
	return auo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (auo *AddressUpdateOne) SetCustomer(c *Customer) *AddressUpdateOne {
	return auo.SetCustomerID(c.ID)
}

// AddShippingOrderIDs adds the "shipping_orders" edge to the Order entity by IDs.
func (auo *AddressUpdateOne) AddShippingOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddShippingOrderIDs(ids...)
	return auo
}

// AddShippingOrders adds the "shipping_orders" edges to the Order entity.
func (auo *AddressUpdateOne) AddShippingOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddShippingOrderIDs(ids...)
}

// AddBillingOrderIDs adds the "billing_orders" edge to the Order entity by IDs.
func (auo *AddressUpdateOne) AddBillingOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.AddBillingOrderIDs(ids...)
	return auo
}

// AddBillingOrders adds the "billing_orders" edges to the Order entity.
func (auo *AddressUpdateOne) AddBillingOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.AddBillingOrderIDs(ids...)
}

// Mutation returns the AddressMutation object of the builder.
func (auo *AddressUpdateOne) Mutation() *AddressMutation {
	return auo.mutation
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (auo *AddressUpdateOne) ClearCustomer() *AddressUpdateOne {
	auo.mutation.ClearCustomer()
	return auo
}

// ClearShippingOrders clears all "shipping_orders" edges to the Order entity.
func (auo *AddressUpdateOne) ClearShippingOrders() *AddressUpdateOne {
	auo.mutation.ClearShippingOrders()
	return auo
}

// RemoveShippingOrderIDs removes the "shipping_orders" edge to Order entities by IDs.
func (auo *AddressUpdateOne) RemoveShippingOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveShippingOrderIDs(ids...)
	return auo
}

// RemoveShippingOrders removes "shipping_orders" edges to Order entities.
func (auo *AddressUpdateOne) RemoveShippingOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveShippingOrderIDs(ids...)
}

// ClearBillingOrders clears all "billing_orders" edges to the Order entity.
func (auo *AddressUpdateOne) ClearBillingOrders() *AddressUpdateOne {
	auo.mutation.ClearBillingOrders()
	return auo
}

// RemoveBillingOrderIDs removes the "billing_orders" edge to Order entities by IDs.
func (auo *AddressUpdateOne) RemoveBillingOrderIDs(ids ...int) *AddressUpdateOne {
	auo.mutation.RemoveBillingOrderIDs(ids...)
	return auo
}

// RemoveBillingOrders removes "billing_orders" edges to Order entities.
func (auo *AddressUpdateOne) RemoveBillingOrders(o ...*Order) *AddressUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return auo.RemoveBillingOrderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AddressUpdateOne) Select(field string, fields ...string) *AddressUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Address entity.
func (auo *AddressUpdateOne) Save(ctx context.Context) (*Address, error) {
	var (
		err  error
		node *Address
	)
	auo.defaults()
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AddressUpdateOne) SaveX(ctx context.Context) *Address {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AddressUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AddressUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AddressUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := address.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AddressUpdateOne) sqlSave(ctx context.Context) (_node *Address, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   address.Table,
			Columns: address.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: address.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Address.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, address.FieldID)
		for _, f := range fields {
			if !address.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != address.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: address.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldType,
		})
	}
	if value, ok := auo.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: address.FieldIsDefault,
		})
	}
	if value, ok := auo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldFirstName,
		})
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldLastName,
		})
	}
	if value, ok := auo.mutation.Address1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddress1,
		})
	}
	if value, ok := auo.mutation.Address2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldAddress2,
		})
	}
	if value, ok := auo.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCompanyName,
		})
	}
	if value, ok := auo.mutation.Suburb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldSuburb,
		})
	}
	if value, ok := auo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldCity,
		})
	}
	if value, ok := auo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldState,
		})
	}
	if value, ok := auo.mutation.Postcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPostcode,
		})
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: address.FieldPhone,
		})
	}
	if value, ok := auo.mutation.CountryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: address.FieldCountryID,
		})
	}
	if value, ok := auo.mutation.AddedCountryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: address.FieldCountryID,
		})
	}
	if auo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   address.CustomerTable,
			Columns: []string{address.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ShippingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.ShippingOrdersTable,
			Columns: []string{address.ShippingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedShippingOrdersIDs(); len(nodes) > 0 && !auo.mutation.ShippingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.ShippingOrdersTable,
			Columns: []string{address.ShippingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ShippingOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.ShippingOrdersTable,
			Columns: []string{address.ShippingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.BillingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.BillingOrdersTable,
			Columns: []string{address.BillingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedBillingOrdersIDs(); len(nodes) > 0 && !auo.mutation.BillingOrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.BillingOrdersTable,
			Columns: []string{address.BillingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BillingOrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   address.BillingOrdersTable,
			Columns: []string{address.BillingOrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Address{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{address.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
