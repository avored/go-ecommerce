// Code generated by entc, DO NOT EDIT.

package order

import (
	"time"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldShippingMethod holds the string denoting the shipping_method field in the database.
	FieldShippingMethod = "shipping_method"
	// FieldShippingAddressID holds the string denoting the shipping_address_id field in the database.
	FieldShippingAddressID = "shipping_address_id"
	// FieldBillingAddressID holds the string denoting the billing_address_id field in the database.
	FieldBillingAddressID = "billing_address_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// EdgeShippingAddress holds the string denoting the shipping_address edge name in mutations.
	EdgeShippingAddress = "shipping_address"
	// EdgeBillingAddress holds the string denoting the billing_address edge name in mutations.
	EdgeBillingAddress = "billing_address"
	// EdgeCustomerOrder holds the string denoting the customer_order edge name in mutations.
	EdgeCustomerOrder = "customer_order"
	// EdgeOrderProducts holds the string denoting the order_products edge name in mutations.
	EdgeOrderProducts = "order_products"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// ShippingAddressTable is the table that holds the shipping_address relation/edge.
	ShippingAddressTable = "orders"
	// ShippingAddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	ShippingAddressInverseTable = "addresses"
	// ShippingAddressColumn is the table column denoting the shipping_address relation/edge.
	ShippingAddressColumn = "shipping_address_id"
	// BillingAddressTable is the table that holds the billing_address relation/edge.
	BillingAddressTable = "orders"
	// BillingAddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	BillingAddressInverseTable = "addresses"
	// BillingAddressColumn is the table column denoting the billing_address relation/edge.
	BillingAddressColumn = "billing_address_id"
	// CustomerOrderTable is the table that holds the customer_order relation/edge.
	CustomerOrderTable = "orders"
	// CustomerOrderInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	CustomerOrderInverseTable = "customers"
	// CustomerOrderColumn is the table column denoting the customer_order relation/edge.
	CustomerOrderColumn = "customer_id"
	// OrderProductsTable is the table that holds the order_products relation/edge.
	OrderProductsTable = "order_products"
	// OrderProductsInverseTable is the table name for the OrderProduct entity.
	// It exists in this package in order to avoid circular dependency with the "orderproduct" package.
	OrderProductsInverseTable = "order_products"
	// OrderProductsColumn is the table column denoting the order_products relation/edge.
	OrderProductsColumn = "order_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPaymentMethod,
	FieldShippingMethod,
	FieldShippingAddressID,
	FieldBillingAddressID,
	FieldCustomerID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
