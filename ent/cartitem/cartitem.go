// Code generated by entc, DO NOT EDIT.

package cartitem

const (
	// Label holds the string label denoting the cartitem type in the database.
	Label = "cart_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldQty holds the string denoting the qty field in the database.
	FieldQty = "qty"
	// FieldCartID holds the string denoting the cart_id field in the database.
	FieldCartID = "cart_id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldItemPrice holds the string denoting the item_price field in the database.
	FieldItemPrice = "item_price"
	// EdgeCart holds the string denoting the cart edge name in mutations.
	EdgeCart = "cart"
	// EdgeProduct holds the string denoting the product edge name in mutations.
	EdgeProduct = "product"
	// Table holds the table name of the cartitem in the database.
	Table = "cart_items"
	// CartTable is the table that holds the cart relation/edge.
	CartTable = "cart_items"
	// CartInverseTable is the table name for the Cart entity.
	// It exists in this package in order to avoid circular dependency with the "cart" package.
	CartInverseTable = "carts"
	// CartColumn is the table column denoting the cart relation/edge.
	CartColumn = "cart_id"
	// ProductTable is the table that holds the product relation/edge.
	ProductTable = "cart_items"
	// ProductInverseTable is the table name for the Product entity.
	// It exists in this package in order to avoid circular dependency with the "product" package.
	ProductInverseTable = "products"
	// ProductColumn is the table column denoting the product relation/edge.
	ProductColumn = "product_id"
)

// Columns holds all SQL columns for cartitem fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldQty,
	FieldCartID,
	FieldProductID,
	FieldItemPrice,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
