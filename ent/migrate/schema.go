// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "address1", Type: field.TypeString},
		{Name: "address2", Type: field.TypeString},
		{Name: "company_name", Type: field.TypeString},
		{Name: "suburb", Type: field.TypeString},
		{Name: "city", Type: field.TypeString},
		{Name: "state", Type: field.TypeString},
		{Name: "postcode", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "country_id", Type: field.TypeInt},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:       "addresses",
		Columns:    AddressesColumns,
		PrimaryKey: []*schema.Column{AddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "addresses_customers_addresses",
				Columns:    []*schema.Column{AddressesColumns[16]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AdminUsersColumns holds the columns for the "admin_users" table.
	AdminUsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// AdminUsersTable holds the schema information for the "admin_users" table.
	AdminUsersTable = &schema.Table{
		Name:       "admin_users",
		Columns:    AdminUsersColumns,
		PrimaryKey: []*schema.Column{AdminUsersColumns[0]},
	}
	// CartsColumns holds the columns for the "carts" table.
	CartsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "session_id", Type: field.TypeString},
		{Name: "full_amount", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(18, 8)"}},
	}
	// CartsTable holds the schema information for the "carts" table.
	CartsTable = &schema.Table{
		Name:       "carts",
		Columns:    CartsColumns,
		PrimaryKey: []*schema.Column{CartsColumns[0]},
	}
	// CartItemsColumns holds the columns for the "cart_items" table.
	CartItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "qty", Type: field.TypeFloat64},
		{Name: "item_price", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(18, 8)"}},
		{Name: "cart_id", Type: field.TypeInt, Nullable: true},
		{Name: "product_id", Type: field.TypeInt, Nullable: true},
	}
	// CartItemsTable holds the schema information for the "cart_items" table.
	CartItemsTable = &schema.Table{
		Name:       "cart_items",
		Columns:    CartItemsColumns,
		PrimaryKey: []*schema.Column{CartItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cart_items_carts_cart_items",
				Columns:    []*schema.Column{CartItemsColumns[4]},
				RefColumns: []*schema.Column{CartsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "cart_items_products_cart_items",
				Columns:    []*schema.Column{CartItemsColumns[5]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString},
		{Name: "meta_title", Type: field.TypeString},
		{Name: "meta_description", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// CustomersColumns holds the columns for the "customers" table.
	CustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// CustomersTable holds the schema information for the "customers" table.
	CustomersTable = &schema.Table{
		Name:       "customers",
		Columns:    CustomersColumns,
		PrimaryKey: []*schema.Column{CustomersColumns[0]},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "payment_method", Type: field.TypeString},
		{Name: "shipping_method", Type: field.TypeString},
		{Name: "shipping_address_id", Type: field.TypeInt, Nullable: true},
		{Name: "billing_address_id", Type: field.TypeInt, Nullable: true},
		{Name: "customer_id", Type: field.TypeInt, Nullable: true},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:       "orders",
		Columns:    OrdersColumns,
		PrimaryKey: []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "orders_addresses_shipping_orders",
				Columns:    []*schema.Column{OrdersColumns[5]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_addresses_billing_orders",
				Columns:    []*schema.Column{OrdersColumns[6]},
				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "orders_customers_orders",
				Columns:    []*schema.Column{OrdersColumns[7]},
				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrderProductsColumns holds the columns for the "order_products" table.
	OrderProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "qty", Type: field.TypeFloat64},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(18, 8)"}},
		{Name: "order_id", Type: field.TypeInt, Nullable: true},
		{Name: "product_id", Type: field.TypeInt, Nullable: true},
	}
	// OrderProductsTable holds the schema information for the "order_products" table.
	OrderProductsTable = &schema.Table{
		Name:       "order_products",
		Columns:    OrderProductsColumns,
		PrimaryKey: []*schema.Column{OrderProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "order_products_orders_order_products",
				Columns:    []*schema.Column{OrderProductsColumns[5]},
				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "order_products_products_order_products",
				Columns:    []*schema.Column{OrderProductsColumns[6]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString},
		{Name: "meta_title", Type: field.TypeString},
		{Name: "meta_description", Type: field.TypeString},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:       "products",
		Columns:    ProductsColumns,
		PrimaryKey: []*schema.Column{ProductsColumns[0]},
	}
	// ProductCategoriesColumns holds the columns for the "product_categories" table.
	ProductCategoriesColumns = []*schema.Column{
		{Name: "product_id", Type: field.TypeInt},
		{Name: "category_id", Type: field.TypeInt},
	}
	// ProductCategoriesTable holds the schema information for the "product_categories" table.
	ProductCategoriesTable = &schema.Table{
		Name:       "product_categories",
		Columns:    ProductCategoriesColumns,
		PrimaryKey: []*schema.Column{ProductCategoriesColumns[0], ProductCategoriesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "product_categories_product_id",
				Columns:    []*schema.Column{ProductCategoriesColumns[0]},
				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "product_categories_category_id",
				Columns:    []*schema.Column{ProductCategoriesColumns[1]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		AdminUsersTable,
		CartsTable,
		CartItemsTable,
		CategoriesTable,
		CustomersTable,
		OrdersTable,
		OrderProductsTable,
		ProductsTable,
		ProductCategoriesTable,
	}
)

func init() {
	AddressesTable.ForeignKeys[0].RefTable = CustomersTable
	CartItemsTable.ForeignKeys[0].RefTable = CartsTable
	CartItemsTable.ForeignKeys[1].RefTable = ProductsTable
	OrdersTable.ForeignKeys[0].RefTable = AddressesTable
	OrdersTable.ForeignKeys[1].RefTable = AddressesTable
	OrdersTable.ForeignKeys[2].RefTable = CustomersTable
	OrderProductsTable.ForeignKeys[0].RefTable = OrdersTable
	OrderProductsTable.ForeignKeys[1].RefTable = ProductsTable
	ProductCategoriesTable.ForeignKeys[0].RefTable = ProductsTable
	ProductCategoriesTable.ForeignKeys[1].RefTable = CategoriesTable
}
