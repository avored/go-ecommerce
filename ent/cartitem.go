// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/avored/go-ecommerce/ent/cart"
	"github.com/avored/go-ecommerce/ent/cartitem"
	"github.com/avored/go-ecommerce/ent/product"
)

// CartItem is the model entity for the CartItem schema.
type CartItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Qty holds the value of the "qty" field.
	Qty float64 `json:"qty,omitempty"`
	// CartID holds the value of the "cart_id" field.
	CartID int `json:"cart_id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// ItemPrice holds the value of the "item_price" field.
	ItemPrice float64 `json:"item_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartItemQuery when eager-loading is set.
	Edges CartItemEdges `json:"edges"`
}

// CartItemEdges holds the relations/edges for other nodes in the graph.
type CartItemEdges struct {
	// Cart holds the value of the cart edge.
	Cart *Cart `json:"cart,omitempty"`
	// Product holds the value of the product edge.
	Product *Product `json:"product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartItemEdges) CartOrErr() (*Cart, error) {
	if e.loadedTypes[0] {
		if e.Cart == nil {
			// The edge cart was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cart.Label}
		}
		return e.Cart, nil
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartItemEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CartItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cartitem.FieldQty, cartitem.FieldItemPrice:
			values[i] = new(sql.NullFloat64)
		case cartitem.FieldID, cartitem.FieldCartID, cartitem.FieldProductID:
			values[i] = new(sql.NullInt64)
		case cartitem.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CartItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CartItem fields.
func (ci *CartItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cartitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ci.ID = int(value.Int64)
		case cartitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ci.Name = value.String
			}
		case cartitem.FieldQty:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field qty", values[i])
			} else if value.Valid {
				ci.Qty = value.Float64
			}
		case cartitem.FieldCartID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cart_id", values[i])
			} else if value.Valid {
				ci.CartID = int(value.Int64)
			}
		case cartitem.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				ci.ProductID = int(value.Int64)
			}
		case cartitem.FieldItemPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field item_price", values[i])
			} else if value.Valid {
				ci.ItemPrice = value.Float64
			}
		}
	}
	return nil
}

// QueryCart queries the "cart" edge of the CartItem entity.
func (ci *CartItem) QueryCart() *CartQuery {
	return (&CartItemClient{config: ci.config}).QueryCart(ci)
}

// QueryProduct queries the "product" edge of the CartItem entity.
func (ci *CartItem) QueryProduct() *ProductQuery {
	return (&CartItemClient{config: ci.config}).QueryProduct(ci)
}

// Update returns a builder for updating this CartItem.
// Note that you need to call CartItem.Unwrap() before calling this method if this CartItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CartItem) Update() *CartItemUpdateOne {
	return (&CartItemClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the CartItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ci *CartItem) Unwrap() *CartItem {
	tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CartItem is not a transactional entity")
	}
	ci.config.driver = tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CartItem) String() string {
	var builder strings.Builder
	builder.WriteString("CartItem(")
	builder.WriteString(fmt.Sprintf("id=%v", ci.ID))
	builder.WriteString(", name=")
	builder.WriteString(ci.Name)
	builder.WriteString(", qty=")
	builder.WriteString(fmt.Sprintf("%v", ci.Qty))
	builder.WriteString(", cart_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.CartID))
	builder.WriteString(", product_id=")
	builder.WriteString(fmt.Sprintf("%v", ci.ProductID))
	builder.WriteString(", item_price=")
	builder.WriteString(fmt.Sprintf("%v", ci.ItemPrice))
	builder.WriteByte(')')
	return builder.String()
}

// CartItems is a parsable slice of CartItem.
type CartItems []*CartItem

func (ci CartItems) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
